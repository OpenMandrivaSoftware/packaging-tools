#!/bin/sh

# Expand $2 to $1 digits
# Example: digits 3 4
# Result: 004
digits() {
	local i
	echo -n $(
	 ( for i in $(seq 1 $1); do
		echo -n 0;
	done ; echo -n $2 ) | rev | cut -b1-$1 | rev)
}

debug() {
	[ -n "$DEBUG" ] && echo "$@" >&2
}

json() {
	python -c "
import json,sys
try:
	print(json.load(sys.stdin)$@)
except IndexError:
	pass
"
}

# Determine the latest of a list of versions
# Current assumptions for simplicity that might cause problems
# in the future: Version numbers are fully numeric (no 1.2.3a),
# and consist of at most 4 components of at most 3 digits each.
#
# Example: latest 1.2.3 1.2.3.1 1.1.4.99 0.99 1
# Result: 1.2.3.1
latest() {
	local LATEST=0
	local LATESTID=0
	local VERSION
	local VERSIONID
	for VERSION in "$@"; do
		if echo $VERSION |grep -q '\.'; then
			VERSIONID=$(digits 4 $(echo $VERSION |cut -d. -f1))$(digits 4 $(echo $VERSION |cut -d. -f2))$(digits 4 $(echo $VERSION |cut -d. -f3))$(digits 4 $(echo $VERSION |cut -d. -f4))
		else
			VERSIONID=$VERSION
		fi
		[ $VERSIONID -lt $LATESTID ] && continue
		LATEST=$VERSION
		LATESTID=$VERSIONID
	done
	echo -n $LATEST
}

specname() {
	case $1 in
	NetworkManager|ModemManager)
		echo -n $(echo $1 |tr A-Z a-z)
		;;
	imagemagick6)
		echo -n ImageMagick6
		;;
	*)
		echo -n $1
		;;
	esac
}

ourVersion() {
	local VERSION
	case $1 in
	*)
		# default: Assume Version: is set to a real number and not some
		# macro magic in the spec file...
		VERSION=$(curl -s -L https://github.com/OpenMandrivaAssociation/$1/raw/master/$(specname $1).spec |grep -iE '^Version[[:space:]]*:' |head -n1 |cut -d: -f2- |xargs echo -n)
		if [ -z "$VERSION" ]; then
			echo -n ERROR
		else
			echo -n $VERSION
		fi
		;;
	esac
}

upstreamVersion() {
	local SOURCE
	local PKGNAME
	local NAME
	local EXCLUDE
	local VERSIONS
	local IGNOREODD
	local SFPROJECT=""
	local EXPR=""
	local EXTRA=""
	rm -f check-update.sh
	curl --fail -o check-update.sh -s -L https://github.com/OpenMandrivaAssociation/$1/raw/master/check-update.sh &>/dev/null
	if [ -e check-update.sh ]; then
		chmod +x check-update.sh
		./check-update.sh
		rm -f check-update.sh
		return 0
	fi
	case $1 in
	acpica)
		echo -n $(curl -s -L -A 'Mozilla/5.0 (X11; Linux x86_64)' https://acpica.org/downloads |grep -E "href=.*acpica-unix-" |sed -e "s,.*acpica-unix-,,;s,\.tar.*,,")
		;;
	chromium-browser-*)
		local CHANNEL=$(echo $1 |cut -d- -f3)
		VERSIONS=$(curl -s -L "https://omahaproxy.appspot.com/all?os=linux&channel=$CHANNEL" |tail -n1 |cut -d, -f3)
		echo -n $VERSIONS
		;;
	hplip)
		# Should be a normal sourceforge download, but they never
		# update the "current version" link - so we have to check
		# their website
		echo -n $(curl -s -L https://developers.hp.com/hp-linux-imaging-and-printing |grep "The current version" |sed -e 's,.*version ,,;s, .*,,' |rev |cut -b2- |rev)
		;;
        stunnel)
                # print last line
                echo -n $(curl -s -L -A 'Mozilla/5.0 (X11; Linux x86_64)' http://www.stunnel.org/downloads.html |grep -E "href=.*stunnel-" |sed -e "s,.*stunnel-,,;s,\.tar.*,," | tail -n1)
		;;
	indilib)
		# Special case because package name doesn't match
		# upstream package name and it uses _ instead of -
		# to separate file name from version number
		echo -n $(curl -s -L -A 'Mozilla/5.0 (X11; Linux x86_64)' https://sourceforge.net/projects/indi/files/ | grep -b1 'Download Latest Version' |tail -n1 |sed -e 's,.*_,,;s,\.tar.*,,')
		;;
	lame)
		echo -n $(curl -s -L http://lame.sf.net |grep 'download.php">v' |sed -e 's,.*v,,;s,<.*,,')
		;;
	libraw)
		latest $(curl -s -L 'https://www.libraw.org/download' |grep -E 'LibRaw-[0-9\.]*'\.tar |sed -e 's,.*data/,,;s,>.*,,;s,LibRaw-,,;s,\.tar.*,,')
		;;
	mariadb)
		# Got to parse their website... No directory listing and too many branches
		echo -n $(curl -s -L https://downloads.mariadb.org/mariadb/ |grep "Stable Now" |sed -e 's,.*Download ,,;s, .*,,')
		;;
	microcode-intel)
		# Special fun because they change URLs with every new download...
		URL=$(curl -s -L https://github.com/OpenMandrivaAssociation/microcode-intel/raw/master/microcode-intel.spec |grep -iE '^Url[[:space:]]*:' |head -n1 |cut -d: -f2- |xargs echo -n)
		while curl -s -L $URL |grep -q alert-link; do
			URL=https://downloadcenter.intel.com$(curl -s -L $URL |grep alert-link |sed -e 's,.*href=\",,;s,".*,,')
		done
		echo -n $(curl -s -L $URL |grep DownloadVersion |sed -e 's,.*content=",,;s,".*,,')
		;;
	nss)
		VERSIONS="$(curl -s -L http://ftp.mozilla.org/pub/security/nss/releases/ |grep NSS_ |cut -d'>' -f3- |cut -d_ -f2- |sed -e 's,_RTM.*,,' |grep -v WITH |sed -e 's,_,.,g')"
		latest $VERSIONS
		;;
	sqlite)
		echo -n $(curl -L -s http://www.sqlite.org/ |grep "Version" |cut -d' ' -f3 |cut -d '<' -f1)
		;;
	cmake)
		echo -n $(curl -s -L https://cmake.org/download/ |grep -E "files/v.*\.tar\.gz" |grep -vE -- '-(alpha|beta|rc)' |head -n1 |sed -e "s,.*$1-,,;s,\.tar.*,,")
		;;
	wine)
		# Wine is a bit of a special case because we can update it only when
		# the corresponding wine-staging patchset is released as well...
		echo -n $(curl -s -L https://raw.githubusercontent.com/wine-compholio/wine-staging/master/patches/patchinstall.sh |grep 'echo "Wine Staging' |cut -d'"' -f2 |cut -d' ' -f3)
		;;
	python-*)
		local pypiName="$(echo $1 |cut -d- -f2-)"
		curl --fail -o /tmp/$pypiName.$$ https://pypi.org/pypi/$pypiName/json &>/dev/null
		# e.g. python-curl -> pycurl
		[ -e /tmp/$pypiName.$$ ] || curl --fail -o /tmp/$pypiName.$$ https://pypi.org/pypi/py$pypiName/json &>/dev/null
		# e.g. python-twisted -> Twisted
		[ -e /tmp/$pypiName.$$ ] || curl --fail -o /tmp/$pypiName.$$ https://pypi.org/pypi/$(echo $pypiName |cut -b1 |tr a-z A-Z)$(echo $pypiName |cut -b2-)/json &>/dev/null
		if [ -e /tmp/$pypiName.$$ ]; then
			cat /tmp/$pypiName.$$ |json "['info']['version']"
        		rm -f /tmp/$pypiName.$$
			return 0
		fi
		;;
	*)
		# default: Assume Source0: or Source: points at a file in a
		# listable directory containing all available versions
		# Unless it's sourceforge, in which case we have to look for
		# the download link while faking a desktop browser
		# (sourceforge sends links to Windows files unless it
		# sees a Linux desktop browser)
		EXCLUDE=nothing
		case $1 in
		atk1.0|glibmm|gtkmm3.0|glib2.0|libcroco0.6)
			PKGNAME=$(echo $1 |sed -e 's,[0-9].*,,')
			IGNOREODD=true
			;;
		atkmm|at-spi2-*|dconf|gedit|librsvg|NetworkManager|ModemManager|gvfs|gtksourceview|libpeas|yelp|pangomm)
			IGNOREODD=true
			;;
		bmake)
			# Their script must have gone wrong -- one zero too
			# much in the 2009/10/07 snapshot, causes version
			# comparison to mess up
			EXCLUDE=200910007
			;;
		imagemagick|imagemagick6)
			PKGNAME=ImageMagick
			EXTRA='s,([0-9]+)-([0-9]+),\1.\2,'
			[ "$1" = "imagemagick6" ] && EXCLUDE='^[7-9].*'
			;;
		joe)
			SFPROJECT=joe-editor
			;;
		ladspa)
			PKGNAME=ladspa_sdk
			EXPR=${PKGNAME}_
			;;
		libsigc-2.0)
			PKGNAME=libsigc\\+\\+
			IGNOREODD=true
			;;
		libtiff)
			PKGNAME=tiff
			;;
		nano)
			SOURCE=https://nano-editor.org/download.php
			;;
		sope)
			SOURCE=https://sogo.nu/files/downloads/SOGo/Sources/
			PKGNAME=SOPE
			;;
		sogo)
			SOURCE=https://sogo.nu/files/downloads/SOGo/Sources/
			PKGNAME=SOGo
			# There are a few 2007.x.y versions named after release
			# date -- but 2.x and 3.x > 2007.x
			EXCLUDE=2007
			;;
		suitesparse)
			PKGNAME=SuiteSparse
			;;
		x11-driver-*)
			PKGNAME=xf86-$(echo $1 |cut -d- -f3-)
			;;
		x11-data-bitmaps)
			PKGNAME=xbitmaps
			;;
		libfs|libice|libsm)
			PKGNAME=lib$(echo $1 |cut -b4- |tr 'a-z' 'A-Z')
			;;
		libxvmc)
			PKGNAME=libXvMC
			;;
		libxtrap)
			PKGNAME=libXTrap
			;;
		libxscrnsaver)
			PKGNAME=libXScrnSaver
			;;
		libxkb*|libxcb*|libxshmfence)
			# just make sure it doesn't get into the libx* transformations
			;;
		libx*)
			PKGNAME=libX$(echo $1 |cut -b5-)
			;;
		live)
			EXPR="$1\."
			;;
		x11-util-macros)
			PKGNAME=util-macros
			;;
		x11-xtrans-devel)
			PKGNAME=xtrans
			;;
		x11-util-cf-files)
			PKGNAME=xorg-cf-files
			;;
		x11-server)
			PKGNAME=xorg-server
			;;
		esac
		[ -z "$SPECNAME" ] && SPECNAME=$1
		[ -z "$SOURCE" ] && SOURCE=$(curl -s -L https://github.com/OpenMandrivaAssociation/$1/raw/master/$(specname $1).spec |grep -iE '^Source0?:' |grep :// |head -n1 |cut -d: -f2- |rev |cut -d/ -f2- |rev |sed -e "s,%{name},$1,g;s,%name,$1,g")/
		[ -z "$PKGNAME" ] && PKGNAME=$1
		[ -z "$EXPR" ] && EXPR="$PKGNAME-"
		if [ -z "$SOURCE" ]; then
			echo -n ERROR
			return
		fi
		debug "Versions of $PKGNAME at $SOURCE"
		if echo "$SOURCE" |grep -qE '(videolan\.org/pub|openttd|nasm\.us)'; then
			# May also be useful for other projects: Versions live in a
			# subdirectory named after the version...
			SOURCE="$(echo $SOURCE |rev |cut -d/ -f3- |rev)/"
			debug "Checking latest versions at $SOURCE"
			latest $(curl -s -L $SOURCE |sed -e 's,</a>,</a>\n,g;s,<a ,\n<a ,g' |grep "href=" |cut -d'"' -f2 |grep -v '//' |grep -v '\.\.' |grep -vE '^[a-zA-Z]' |grep -vE "(sha256|sha512|win32|\.asc|\.sign)" |sed -E 's,/(index.html)?$,,' |grep -v '[a-zA-Z]')
			return
		elif echo $SOURCE |grep -q '^ftp:'; then
			VERSIONS=$(curl -s -L $SOURCE | \
				awk '{ print $9; }' | \
				grep -vE "(md5|sha256|sha512|win32|\.asc|\.sign)" | \
				sed -E "$EXTRA" | \
				grep -E "^${EXPR}.*\.(tar|tgz|tbz2|txz|zip)" | \
				sed -e "s,^${EXPR},," | \
				sed -E 's,\.(tar|tgz|tbz2|txz|zip).*,,' | \
				grep -E '^[0-9.]+$' |
				grep -v "$EXCLUDE")
		elif [ "$PKGNAME" = "firefox" ]; then
			# Need to strip off %{version}/source/
			SOURCE="$(echo $SOURCE |rev |cut -d/ -f4- |rev)/"
			EXPR=""
			latest $(curl -s -L $SOURCE |sed -e 's,</a>,</a>\n,g' |grep "href=" |cut -d'"' -f2 |cut -d/ -f5 |grep -v '//' |grep -v '\.\.' |grep -vE '[^0-9.]')
			return
		elif echo $SOURCE |grep -qE '(gnome|gtk|gimp|twistedmatrix|acc\.umu)\.(com|org|se)'; then
			# Gjunk tends to follow a directory structure of
			# major_version/file-minor_version.tar.*
			# Also major_version sometimes, but not always, is
			# unstable if it's odd-numbered...
			SOURCE="$(echo $SOURCE |rev |cut -d/ -f3- |rev)/"
			local NOODD="grep -v nothing"
			if [ -n "$IGNOREODD" ]; then
				NOODD="grep -v [13579]$"
			fi
			local MAJOR_VERSIONS=$(curl -s -L $SOURCE | \
				grep -o -E "href=[\"'](.*)[\"']" | \
				sed -e "s,^href=.,,;s,[\"'].*,," | \
				grep -v "^?" | \
				grep -E "^[0-9].*/$" |
				sed -e 's,/$,,' |
				$NOODD)
			# ") <--- Just a workaround for a bug in the vim syntax highlighter
			debug "Major versions available for $PKGNAME at $SOURCE: $MAJOR_VERSIONS"
			local MAJOR=$(latest $MAJOR_VERSIONS)
			debug "Latest major version: $MAJOR"
			SOURCE="$SOURCE$MAJOR/"
		elif echo $SOURCE |grep -qE '(sourceforge|sf)\.net'; then
			[ -z "$SFPROJECT" ] && SFPROJECT=$1
			VERSIONS=$(echo -n $(curl -s -L -A 'Mozilla/5.0 (X11; Linux x86_64)' https://sourceforge.net/projects/$SFPROJECT/files/ |grep -b1 'Download Latest Version' |tail -n1 |sed -e "s,.*>$PKGNAME-,,;s,\.tar.*,,"))
		elif echo $SOURCE |grep -qE 'pythonhosted\.org'; then
			NAME="`echo $SOURCE |cut -d/ -f7`"
			if [ -z "$NAME" ] || (echo $NAME |grep -q %); then
				NAME=`echo $PKGNAME |sed -e 's,^python-,,'`
			fi
			curl https://pypi.org/pypi/$NAME/json >/tmp/$NAME.$$
			if [ -e /tmp/$NAME.$$ ]; then
				VERSIONS=`cat /tmp/$NAME.$$ |json "['info']['version']"`
				rm -f /tmp/$NAME.$$
			fi
		elif echo $SOURCE |grep -qE 'git(hub|lab).com'; then
			VERSIONS=$(git ls-remote --tags $(echo $SOURCE |cut -d/ -f1-5) 2>/dev/null|awk '{ print $2; }' |sed -e 's,refs/tags/,,;s,_,.,g;s,-,.,g;s,^v\.,,;s,^v,,' |grep -E '^[0-9.]+$')
		fi
		if [ -z "$VERSIONS" ]; then
			# This is intentionally a separate if instead of another
			# elif: Some special cases above, e.g. gnome.org, manipulate
			# $SOURCE and then use the "default" way of determining the
			# latest version.
			debug looking for latest $PKGNAME in $SOURCE
			[ -n "$DEBUG" ] && set -x
			if echo $SOURCE |grep -qE '/(%{)?version(})?/$'; then
				SOURCE="`echo $SOURCE |rev |cut -d/ -f3- |rev`"
				VERSIONS=$(curl -s -L $SOURCE | \
					grep -oE 'href=\"(.*\")' | \
					sed -E "s,^href=[\"']?,,;s,[\"'>].*,," | \
					sed -E "s,/$,," | \
					sed -E "$EXTRA" | \
					grep -v "^?" | \
					grep -vE "(md5|sha256|sha512|win32|\.asc|\.sign)" | \
					grep -E '^[0-9.]+$' |
					grep -v "$EXCLUDE")
			else
				VERSIONS=$(curl -s -L $SOURCE | \
					grep -oE "href=(.*)" | \
					sed -E "s,^href=[\"']?,,;s,[\"'>].*,," | \
					sed -E "$EXTRA" | \
					grep -v "^?" | \
					grep -vE "(md5|sha256|sha512|win32|\.asc|\.sign)" | \
					grep -E "^${EXPR}[0-9].*\.(tar|tgz|tbz2|txz|zip)" | \
					sed -E "s,^${EXPR},," | \
					sed -E 's,\.(tar|tgz|tbz2|txz|zip).*,,' | \
					grep -E '^[0-9.]+$' |
					grep -v "$EXCLUDE")
			fi
			[ -n "$DEBUG" ] && set +x
		fi
		debug "$VERSIONS"
		if [ -z "$VERSIONS" ]; then
			echo -n ERROR
			return
		fi
		latest $VERSIONS
		;;
	esac
}

update() {
	local D=$(mktemp -d /tmp/autoupdate-$1.XXXXXX)
	if [ -z "$D" ]; then
		echo "$1: Error creating temporary directory"
		continue
	fi
	pushd "$D"
	git clone git@github.com:OpenMandrivaAssociation/$1.git
	cd $1
	local ORIGFILES="`cat .abf.yml |grep '^[[:space:]]' |cut -d: -f1 |xargs echo`"
	sed -i -E "/$(echo $2 |sed -e 's,\.,\\.,g')\.(tar|tgz|tbz2|txz|zip)/d" .abf.yml
	sed -i -E "/$(echo $2 |sed -e 's,\.,\\.,g')\.source\.(tar|tgz|tbz2|txz|zip)/d" .abf.yml
	# gitlab.com-ism -- Downloads from git tags are always called archive.tar.{gz,bz2}
	sed -i -E "/archive.tar.(gz|bz2)/d" .abf.yml
	local REMAININGFILES="`cat .abf.yml |grep '^[[:space:]]' |cut -d: -f1 |xargs echo`"
	local REMOVEDFILES="`echo $ORIGFILES $REMAININGFILES |sed -e 's, ,\n,g' |sort |uniq -u`"
	if echo $REMOVEDFILES |grep -q /; then
		echo "WARNING: INVALID .abf.yml THAT MAY BE DESIGNED TO DO DAMAGE!"
		exit 1
	fi
	if echo $REMOVEDFILES |grep -q -- ';'; then
		echo "WARNING: INVALID .abf.yml THAT MAY BE DESIGNED TO DO DAMAGE!"
		exit 1
	fi
	[ -n "$REMOVEDFILES" ] && rm -f $REMOVEDFILES

	case "$1" in
	microcode-intel)
		# Special fun because they change URLs with every new download...
		# Also got to find the new downloadcenter ID...
		local URL=$(curl -s -L https://github.com/OpenMandrivaAssociation/microcode-intel/raw/master/microcode-intel.spec |grep -iE '^Url[[:space:]]*:' |head -n1 |cut -d: -f2- |xargs echo -n)
		local ORIGURL="$URL"
		while curl -s -L "$URL" |grep -q alert-link; do
			URL=https://downloadcenter.intel.com$(curl -s -L "$URL" |grep alert-link |sed -e 's,.*href=\",,;s,".*,,')
		done
		if [ "$URL" != "$ORIGURL" ]; then
			sed -i -e "s,^\(URL.*:\s*\)[0-9]*,\1$URL," *.spec
		fi
		;;
	firefox)
		# Get rid of translation files for older versions...
		sed -i -e "/.*\.xpi/d" .abf.yml
		;;
	virtualbox)
		# Make sure we update the user manual as well...
		# (Name is unversioned, but content changes...)
		sed -i -e "/UserManual\.pdf/d" .abf.yml
		;;
	esac
	# Output redirected to /dev/null so we don't get an obscure Python error
	# if .abf.yml doesn't actually list any files anymore after removing
	# obsolete ones
	abf fetch &>/dev/null
	sed -i -e "s,^\(Version.*:.*\)$2,\1$3," *.spec
	sed -i -e "s,^\(Release.*:\s*\)[0-9]*,\11," *.spec
	sed -i -e "s,^\(Release.*:\s*\)[0-9]*\.%{beta}\.[0-9]*,\10.%{beta}.1," *.spec
	sudo dnf --refresh builddep -y --nogpgcheck --best --allowerasing *.spec
	# Make sure rpm can download the files we need
	if [ "$(rpm --eval '%{_disable_source_fetch}')" != 0 ]; then
		echo '%_disable_source_fetch	0' >>~/.rpmmacros
		REMOVE_DISABLE_SOURCE_FETCH=1
	fi
	ls -AF |grep -vE '/$' >files-before-rpm
	[ -e package-source.sh ] && sh package-source.sh
	abb build 2>&1 |tee BUILD.LOG
	ls -AF |grep -vE '(BUILD.LOG|files-after-rpm|\.buildlog|/)$' >files-after-rpm
	if [ "$REMOVE_DISABLE_SOURCE_FETCH" = 1 ]; then
		sed -i -e "/^%_disable_source_fetch	0$/d" ~/.rpmmacros
	fi
	if ls RPMS/*/*.rpm &>/dev/null; then
		abb store $(diff -c files-before-rpm files-after-rpm |grep -E '^\+' |cut -b3-)
		git commit -am "Update to $3"
		git push origin master
		echo "$1: successfully updated from $2 to $3"
		if ! abf chain_build -b master --no-cached-chroot --auto-publish --update-type enhancement openmandriva/"$1"; then
			echo "$1: succeeded locally but failed to build in abf"
		else
			echo "$1: OK"
		fi
	else
		echo "$1: failed updating from $2 to $3"
		mkdir -p ~/failed-builds
		[ -d ~/failed-builds/"$1" ] || mv "$D"/"$1" ~/failed-builds/
	fi
	popd
	rm -rf "$D"
}

if [ "$1" = "-a" -o "$1" = "--all" ]; then
	if [ -z "$OAUTH_TOKEN" ]; then
		echo "For --all to work, export OAUTH_TOKEN=\"token\""
		echo "where \"token\" is a github authentication token"
		echo "generated at https://github.com/settings/token"
		exit 1
	fi
	PACKAGES=""
	PERPAGE=100
	COUNT=0
	START=""
	org=OpenMandrivaAssociation
	echo -n "Getting list of packages "
	while true; do
		echo -n .
		QUERY="{\"query\": \"query {organization(login:\\\"$org\\\") { id name repositories(first:$PERPAGE $START) { edges { node { id name } cursor } pageInfo { endCursor hasNextPage } } } }\""
		REPOS="$(curl -H "Authorization: token $OAUTH_TOKEN" -X POST -d "$QUERY" https://api.github.com/graphql 2>/dev/null)"
		if [ -z "$REPOS" ]; then
			 echo "$QUERY failed" >&2
			 break
		fi
		for i in $(seq 0 $((PERPAGE-1))); do
			R="$(echo $REPOS |json "['data']['organization']['repositories']['edges'][$i]['node']['name']").git"
			if [ "$R" = ".git" ]; then
				echo "No more repositories at $QUERY $i" >&2
				break
			fi
			if [ "$R" = "abf-yml.git" -o "$R" = "secret-keys.git" -o "$R" = "OpenMandrivaAssociation.github.io.git" ]; then
				# These repositories contain passwords and aren't public
				# Since we aren't authenticated, can't mirror them
				continue
			fi
			COUNT=$((COUNT+1))
			PACKAGES="$PACKAGES $(echo $R |sed -e 's,\.git$,,')"
		done
		[ "$(echo $REPOS |json "['data']['organization']['repositories']['pageInfo']['hasNextPage']")" != "True" ] && break
		START="after:\\\"$(echo $REPOS |json "['data']['organization']['repositories']['pageInfo']['endCursor']")\\\""
	done
	echo
	shift
fi

if [ "$1" = "-d" -o "$1" = "--dry-run" ]; then
	export DRYRUN=1
	shift
fi

if [ -z "$PACKAGES" ]; then
	if [ "$#" -gt 0 ]; then
		PACKAGES="$@"
	else
		# Packages known to work under normal conditions...
		# Listed in alphabetic order, except when one update typically
		# depends on another (e.g. sogo needs to go after sope)
		# Also, larger blocks of related packages (e.g. X11) may be grouped
		# together
		PACKAGES="a2ps acmetool acpica adcli adwaita-icon-theme ags aisleriot alsa-lib alsa-utils alsa-tools appstream-glib arping asio babeltrace bino bison bmake chromium-browser-dev chromium-browser-stable cmake cups-filters curl dhcpcd diffutils digikam e2fsprogs fann ffmpeg firefox flac freetds freetype gdbm git gnupg gnustep-make gnustep-base gnustep-gui grantlee gsl gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly guile gzip harfbuzz imagemagick imagemagick6 indilib iproute2 itstool iw joe kaffeine krb5 ladspa lame libaacs libbsd libbluray libcdio libcdr libcmis libdmtx libdrm libdvbpsi libdvdread libdvdnav libdvdcss libixion libogg liborcus libshout libqalculate libraw libssh2 libtiff libunistring libvisio libvorbis libzip man-pages mercurial mesa microcode-intel mpg123 nasm nettle nfs-utils nss mdds mpfr mpv onig openttd optipng patch pciutils physfs pigz polkit poppler pth python-twisted qpdf redis rspamd rsync scons smplayer sope sogo strace talloc tevent tdb usbutils ldb samba sqlite subversion tor vim vorbis-tools warzone2100 xfsprogs xmlrpc-epi xmlsec1 x11-driver-input-acecad x11-driver-input-aiptek x11-driver-input-citron x11-driver-input-evdev x11-driver-input-fpit x11-driver-input-hyperpen x11-driver-input-joystick x11-driver-input-keyboard x11-driver-input-libinput x11-driver-input-mouse x11-driver-input-mutouch x11-driver-input-penmount x11-driver-input-synaptics x11-driver-input-vmmouse x11-driver-input-void x11-driver-video-amdgpu x11-driver-video-apm x11-driver-video-ark x11-driver-video-ast x11-driver-video-ati x11-driver-video-chips x11-driver-video-dummy x11-driver-video-fbdev x11-driver-video-freedreno x11-driver-video-geode x11-driver-video-glint x11-driver-video-i128 x11-driver-video-i740 x11-driver-video-intel x11-driver-video-mach64 x11-driver-video-neomagic x11-driver-video-newport x11-driver-video-nouveau x11-driver-video-nv x11-driver-video-omap x11-driver-video-openchrome x11-driver-video-opentegra x11-driver-video-qxl x11-driver-video-r128 x11-driver-video-rendition x11-driver-video-s3 x11-driver-video-s3virge x11-driver-video-savage x11-driver-video-siliconmotion x11-driver-video-sis x11-driver-video-sisusb x11-driver-video-tdfx x11-driver-video-tga x11-driver-video-trident x11-driver-video-tseng x11-driver-video-v4l x11-driver-video-vesa x11-driver-video-vmware x11-driver-video-voodoo x11-driver-video-xgixp libdmx libfontenc libfs libice liblbxutil libpciaccess libpthread-stubs libsm libx11 libxau libxaw libxcomposite libxcursor libxdamage libxdmcp libxevie libxext libxfixes libxfont libxfont2 libxfontcache libxft libxi libxinerama libxkbfile libxkbui libxmu libxpm libxpresent libxrandr libxrender libxres libxscrnsaver libxshmfence libxt libxtrap libxtst libxv libxvmc libxxf86dga libxxf86misc pixman x11-xtrans-devel appres bdftopcf beforelight bitmap editres fonttosfnt fslsfonts fstobdf grandr iceauth ico intel-gpu-tools lbxproxy listres luit mkcomposecache mkfontdir mkfontscale oclock proxymngr rendercheck rgb rstart sessreg setxkbmap showfont smproxy twm viewres x11perf xauth xbacklight xbiff x11-data-bitmaps xcalc xclipboard xclock xcmsdb xcompmgr xconsole xcursorgen xdbedizzy xditview xdm xdpyinfo xdriinfo xedit xev xeyes xf86dga xfd xfindproxy xfontsel xfs xfsinfo xfwp xgamma xgc xhost xinit xinput xkbcomp xkbevd xkbprint xkbutils xkill xload xlogo xlsatoms xlsclients xlsfonts xmag xman xmessage xmh xmodmap xmore xpr xprop xrandr xrdb xrefresh xrx xscope xset xsetmode xsetpointer xsetroot xsm xstdcmap xtrap xvidtune xvinfo xwd xwininfo xwud xkeyboard-config x11-server gccmakedep imake lndir makedepend x11-util-macros x11-util-cf-files libxcb xcb-util xcb-util-image xcb-util-keysyms xcb-util-renderutil xcb-util-wm wine atk1.0 atkmm at-spi2-core at-spi2-atk dconf libcroco0.6 librsvg babl gegl cogl clutter libchamplain libopenraw libpeas libsigc-2.0 libsigc-3.0 glib2.0 glibmm gssdp gupnp gupnp-igd libnice farstream gsettings-desktop-schemas gtkmm3.0 gtksourceview gedit gvfs yelp libmbim libqmi ModemManager NetworkManager pangomm whois htop nginx networkmanager-pptp firewalld stunnel ssr proj"
	fi
fi

PKGS=0
UPDATED=0
for i in $PACKAGES; do
	OURVERSION=$(ourVersion $i)
	NEWVERSION=$(upstreamVersion $i)
	echo $NEWVERSION |grep -q '[()<>]' && NEWVERSION=ERROR
	if [ "$OURVERSION" = "ERROR" -o "$NEWVERSION" = "ERROR" ]; then
		mkdir -p ~/failed-builds
		echo $i >>~/failed-builds/version-determination.err
		echo "$i: ERROR trying to determine version"
	elif [ "$OURVERSION" != "$NEWVERSION" -a "$(latest $OURVERSION $NEWVERSION)" = "$NEWVERSION" ]; then
		if [ "$DRYRUN" = "1" ]; then
			echo "*** Would update $i from $OURVERSION to $NEWVERSION ***"
		else
			echo "$i: trying to update from $OURVERSION to $NEWVERSION"
			update $i $OURVERSION $NEWVERSION
		fi
		UPDATED=$((UPDATED+1))
	elif [ "$OURVERSION" = "$NEWVERSION" ]; then
		echo "$i: $OURVERSION is up to date"
	else
		echo "$i: error checking for updates"
	fi
	PKGS=$((PKGS+1))
done
echo "Updated $UPDATED out of $PKGS packages"
