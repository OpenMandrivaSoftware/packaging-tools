#!/bin/sh
# Usage: update project version [startfrom]
#	project: Project to build (ls *.buildlist for available projects)
# 	version: Version to update to
#	startfrom: Package to start from (e.g. to continue where
#		a previous build left off because of a patch rebase
#		or file list issue)
#
# (C) 2015 Bernhard Rosenkr√§nzer <bero@lindev.ch>
# Released under the terms of the GPLv3

error() {
	echo "$1 failed to build -- please see above and fix."
	exit 1
}

keepsudoauthcache() {
	sudo -v
	(sleep 4m ; keepsudoauthcache) &
}

if [ "$#" -lt 1 ]; then
	echo "Specify the version to update to"
	exit 1
fi

AFTER=false
PRERELEASE=false
LOCALONLY=false
BETA=""
while [ "$(echo $1 |cut -b1)" = "-" ]; do
	case $1 in
	-a|--after)
		AFTER=true
		;;
	-b|--beta)
		shift
		BETA="$1"
		;;
	-l|--local|--localonly)
		LOCALONLY=true
		;;
	-p|--prerelease)
		PRERELEASE=true
		;;
	*)
		echo "WARNING: Unknown option $1"
		;;
	esac
	shift
done

PROJECT="$1"
VERSION="$2"
PACKAGES="$(cat $(dirname $0)/$PROJECT.buildlist |grep -vE '^#' |sed -e 's,openmandriva/,,g')"
REALVERSION="${VERSION}"

if [ "$#" -ge 3 ]; then
	P=""
	RELEVANT=0
	for i in $PACKAGES; do
		if [ "$i" = "$3" ]; then
			RELEVANT=1
			if $AFTER; then
				continue
			fi
		fi
		[ "$RELEVANT" = "1" ] && P="$P $i"
	done
	PACKAGES="$P"
fi

echo "Sudo privileges required for 'dnf builddep'"
keepsudoauthcache

for i in $PACKAGES; do
	rm -rf ${i}
	RETRIES=0
	while ! git clone git@github.com:OpenMandrivaAssociation/${i}.git; do
		sleep 5s
		RETRIES=$((RETRIES+1))
		if [ "$RETRIES" -gt 10 ]; then
			error $i
		fi
	done
	cd ${i}

	if grep -q '^%define git ' *.spec; then
		WAS_GIT=true
	else
		WAS_GIT=false
	fi

	if [ "${VERSION:0:3}" = "git" ]; then
		DATE="$(date +%Y%m%d)"
		OLDDATE="$(grep -i '^%define[[:space:]]*git[[:space:]]*' *.spec |head -n1 |awk '{ print $3; }')"
		OLDEXP=${OLDDATE}
	fi
	if [ "${VERSION}" != "git" ]; then
		OLDVERSION="$(grep -i '^Version[[:space:]]*:' *.spec |head -n1 |cut -d: -f2 |xargs echo)"
		OLDEXP="$(echo ${OLDVERSION} |sed -e 's,\.,\\.,g')"
		if grep -q "^%define beta " *.spec; then
			OLDBETA="$(cat *.spec |grep "^%define beta " |sed -e 's,^%define beta ,,')"
			if [ "${OLDBETA}" != "%{nil}" ]; then
				OLDEXP="${OLDEXP}-${OLDBETA}"
			fi
		else
			OLDBETA=""
		fi
	fi
	sed -i -e "/${OLDEXP}\.tar/d" .abf.yml
	if [ "$PROJECT" = "qt" ]; then
		# Qt often can't decide if it's "beta" or "beta1", and "rc" or "rc1"...
		# Let's adjust the specs accordingly...
		#sed -i -e 's#/%{version}-%{beta}/#/%{version}-%(echo %{beta} |sed -e "s,1$,,")/#' *.spec
		sed -i -e 's#%{version}-%(echo %{beta} |sed -e "s,1$,,")/#%{version}-%{beta}/#' *.spec
	fi
	# Ideally PKGVERSION would always be the same as VERSION, but in the real
	# world, some packages don't follow the same versioning scheme - e.g. in
	# LXQt, libsysstat is 1 major version behind the rest etc.
	if [ "$i" = "libsysstat" -o "$i" = "lxqt-archiver" ]; then
		PKGVERSION="$(($(echo ${VERSION}|cut -d. -f1)-1)).$(echo ${VERSION}|cut -d. -f2-)"; echo $PKGVERSION
	elif [ "$i" = "lxqt-wayland-session" ]; then
		PKGVERSION="$(($(echo ${VERSION}|cut -d. -f1)-2)).$(echo ${VERSION}|cut -d. -f2-)"; echo $PKGVERSION
	elif [ "$i" = "libqtxdg" -o "$i" = "qtxdg-tools" ]; then
		PKGVERSION="$(($(echo ${VERSION}|cut -d. -f1)+2)).$(echo ${VERSION}|cut -d. -f2-)"; echo $PKGVERSION
	elif [ "$i" = "libdbusmenu-lxqt" ]; then
		# libdbusmenu-lxqt is released with lxqt, but its versioning scheme is
		# very much unpredictable
		PKGVERSION="$(git ls-remote https://github.com/lxqt/libdbusmenu-lxqt |awk '{print $2}' |grep 'refs/tags/' |sed -e 's,.*refs/tags/,,;s,\^{},,' |sort -V |tail -n1)"
	else
		PKGVERSION=${VERSION}
	fi

	if [ "${VERSION:0:3}" = "git" ]; then
		if $WAS_GIT; then
			if [ "${OLDDATE}" = "${DATE}" ]; then
				echo "$i seems to be up to date already, skipping"
				cd ..
				continue
			fi
		else
			sed -i -e 's,#define git ,%define git ,' *.spec
		fi
		if [ "${VERSION}" != "git" ]; then
			PKGVERSION="${VERSION:4}"
		fi
	fi
	if [ "${VERSION}" != "git" ]; then
		if $WAS_GIT && [ "${VERSION:0:3}" != "git" ]; then
			sed -i -e 's,^%define git ,#define git ,' *.spec
		elif grep -q '^%define beta' *.spec; then
			if [ -n "$BETA" ] && grep -q "^%define beta $BETA\$" *.spec; then
				echo "$i seems to be up to date already, skipping"
				cd ..
				continue
			elif grep -q '^%define beta %{nil}' *.spec; then
				echo "$i seems to be up to date already, skipping"
				cd ..
				continue
			fi
		elif [ "${OLDVERSION}" = "${PKGVERSION}" -a -z "${BETA}" ]; then
			echo "$i seems to be up to date already, skipping"
			cd ..
			continue
		fi
	fi
	if [ "${VERSION:0:3}" = "git" ]; then
		sed -i -e "s,^%define git .*,%define git ${DATE}," *.spec
	fi
	if [ "${VERSION}" != "git" ]; then
		sed -i -e "s,^\(Version.*:.*\)${OLDEXP},\1${PKGVERSION}," *.spec
	fi
	sed -i -e "s,^\(Release.*:\s*\)[0-9]*$,\11," *.spec
	sed -i -E 's,^(Release.*:\s.*}).*,\11,' *.spec
	if [ -n "$BETA" ]; then
		sed -i -e "s,^#define beta .*,%define beta $BETA," -e "s,^%define beta .*,%define beta $BETA," *.spec
		if ! grep -q "define beta" *.spec; then
			sed -i -e "/^Version:/a%define beta $BETA" *.spec
			sed -i -E 's,^(Release.*:\s*).*,\1%{?beta:0.%{beta}.}1,' *.spec
		fi
	else
		sed -i -e "s,^%define beta ,#define beta ," *.spec
	fi

	sudo dnf builddep -y --nogpgcheck *.spec
	if ${PRERELEASE} && [ "${VERSION}" != "git" ]; then
		STABLE=stable
		[ $(echo $VERSION |cut -d. -f3) -ge 70 ] && STABLE=unstable
		SCPDIR=ftpopenmandriva@tinami.kde.org:/srv/archives/ftp/${STABLE}
		if [ "$(echo $i |cut -b1-4)" = "kf6-" ]; then
			TARNAME="$(echo $i |cut -b5-)"
		elif [ "$(echo $i |cut -b1-8)" = "plasma6-" ]; then
			TARNAME="$(echo $i |cut -b9-)"
		elif [ "${i}" = "oxygen-icons" ]; then
			TARNAME=${i}5
		elif [ "${i}" = "kgamma5" ]; then
			TARNAME=${i}
		elif [ "${i}" = "kirigami" ]; then
			TARNAME=${i}2
		elif [ "${i}" = "kdeconnect" ]; then
			TARNAME="kdeconnect-kde"
		else
			TARNAME=$(echo ${i} |sed -e 's,5$,,')
		fi
		if [ "${PROJECT}" = "kf" -o "${PROJECT}" = "kf6" ]; then
			SCPDIR=$SCPDIR/frameworks/$(echo ${VERSION} |sed -e 's,\.0$,,')
			grep -q portingAids *.spec && SCPDIR="${SCPDIR}/portingAids"
		elif [ "${PROJECT}" = "pd" -o "${PROJECT}" = "plasma6" ]; then
			SCPDIR=$SCPDIR/plasma/${VERSION}
		elif [ "${PROJECT}" = "kapps" -o "${PROJECT}" = "kapps6" ]; then
			SCPDIR=$SCPDIR/release-service/${VERSION}/src
		fi
		scp ${SCPDIR}/${TARNAME}-${PKGVERSION}.tar.xz . || :
	fi

	if grep -q vendor.tar.xz .abf.yml; then
		# ****ing annoying rust crap!!!
		# We thought we had solved the dynamic linking problem
		# 5 decades ago, but of course rust morons know "better"
		case $i in
		cosmic-app-library)
			TARNAME=cosmic-applibrary
			;;
		*)
			TARNAME=$i
			;;
		esac

		sed -i -e "/vendor.tar.xz/d" .abf.yml
		rm -f vendor.tar.xz
		mkdir vendor
		tar cJf vendor.tar.xz vendor
		rmdir vendor
		set -x
		abb build -bp
		cd BUILD/*/$TARNAME*
		cargo vendor &>cargo.log
		sed -n '/^\[/,$p' cargo.log >../../../cargo_config
		tar cJf ../../../vendor.tar.xz vendor
		cd ../../..
		rm -rf BUILD
		abb store vendor.tar.xz
	fi

	abb build || error $i
	ls RPMS/*/* &>/dev/null || error $i
	if [ -n "$BETA" ]; then
		PKGVERSION="${PKGVERSION}-${BETA}"
	fi
	if [ "${VERSION:0:3}" = "git" ]; then
		abb store *${DATE}.tar* || error $i
	else
		abb store *${PKGVERSION}.tar* || error $i
	fi
	git commit -am "Update to ${PKGVERSION}" || error $i
	git push origin master
	sudo dnf install -y --nogpgcheck RPMS/*/*.rpm
	cd ..
	VERSION="${REALVERSION}"
done

$LOCALONLY || abf chain_build -a znver1 -a aarch64 -a x86_64 -b master --no-extra-tests --update-type enhancement -i $PROJECT.buildlist
